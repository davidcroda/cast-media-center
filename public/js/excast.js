// Generated by CoffeeScript 1.6.3
(function() {
  var Excast,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Excast = (function() {
    function Excast() {
      this.onRequestSessionSuccess = __bind(this.onRequestSessionSuccess, this);
      this.loadApp = __bind(this.loadApp, this);
      this.receiverListener = __bind(this.receiverListener, this);
      this.sessionUpdateListener = __bind(this.sessionUpdateListener, this);
      this.sessionListener = __bind(this.sessionListener, this);
      this.onError = __bind(this.onError, this);
      this.onInitSuccess = __bind(this.onInitSuccess, this);
      this.updateControls = __bind(this.updateControls, this);
      this.updateProgress = __bind(this.updateProgress, this);
      this.updateProgressBar = __bind(this.updateProgressBar, this);
      this.updateMediaDisplay = __bind(this.updateMediaDisplay, this);
      this.onMediaDiscovered = __bind(this.onMediaDiscovered, this);
      this.initializeCastApi = __bind(this.initializeCastApi, this);
      this.stopMedia = __bind(this.stopMedia, this);
      this.seekMedia = __bind(this.seekMedia, this);
      this.playMedia = __bind(this.playMedia, this);
      this.loadMedia = __bind(this.loadMedia, this);
      this.checkMedia = __bind(this.checkMedia, this);
      this.transcodeVideo = __bind(this.transcodeVideo, this);
      this.bindControls = __bind(this.bindControls, this);
      this.init = false;
      this.appSession = null;
      this.mediaSession = null;
      this.queue = null;
      this.timer = null;
      this.currentTime = 0;
      this.timeouts = {};
      if (!chrome.cast || !chrome.cast.isAvailable) {
        setTimeout(this.initializeCastApi, 1000);
      }
    }

    Excast.prototype.bindControls = function() {
      var excast,
        _this = this;
      excast = this;
      this.play = $('#play');
      this.play.bind('click', this.playMedia);
      this.stop = $('#stop');
      this.stop.bind('click', this.stopMedia);
      $('.progress').bind('click', function(ev) {
        var percent, width, x;
        x = ev.offsetX;
        width = $(this).width();
        console.log(x, width);
        percent = x / width;
        return excast.seekMedia(percent);
      });
      $('#search').bind('keyup', function() {
        var query;
        query = ".*" + $("#search").val().toLowerCase() + ".*";
        $('.video-title').each(function(index, item) {
          item = $(item);
          if (item.html().toLowerCase().match(query)) {
            return item.parents('.col-md-3').show();
          } else {
            return item.parents('.col-md-3').hide();
          }
        });
        return $('#video-container').isotope('reLayout');
      });
      return $('#video-container').isotope({
        itemSelector: '.video',
        layoutMode: 'fitRows'
      });
    };

    Excast.prototype.transcodeVideo = function(video, el) {
      var _this = this;
      $(el).addClass('transcoding');
      return $.post('/api/video/' + video.get('id'), function(data) {
        var percent;
        if (data.video) {
          clearTimeout(_this.timeouts[video.get('path')]);
          return data.video;
        }
        percent = data.progress * 100;
        $(el).find('.overlay').css({
          width: percent + "%"
        });
        clearTimeout(_this.timeouts[video.get('path')]);
        _this.timeouts[video.get('path')] = setTimeout(function() {
          return _this.transcodeVideo(video, el);
        }, 15000);
        return false;
      });
    };

    Excast.prototype.checkMedia = function(video, el) {
      if (video.get('vcodec') !== 'h264' || video.get('acodec') !== 'aac') {
        return this.transcodeVideo(video, el);
      } else {
        $(el).addClass('active');
        video.set('url', video.get('sources')[0]);
      }
      return video;
    };

    Excast.prototype.loadMedia = function(video, el) {
      var mediaInfo, request, thumb, title, url,
        _this = this;
      video = this.checkMedia(video, el);
      if (video) {
        title = video.get('title');
        url = video.get('url');
        thumb = video.get('thumbnailLarge');
        console.log("loadMedia: ", title, url, thumb);
        if (!this.appSession) {
          this.loadApp(function() {
            return _this.loadMedia(title, url, thumb);
          });
          return false;
        }
        $('.current-media').html(title);
        $('.thumbnail').attr('src', thumb);
        $('#control-nav').show();
        $('.progress-striped').addClass('active').children('#progress').width('100%');
        console.log("loading... " + url);
        mediaInfo = new chrome.cast.media.MediaInfo(url);
        mediaInfo.contentType = 'video/mp4';
        mediaInfo.customData = {
          title: title,
          thumbnail: thumb
        };
        request = new chrome.cast.media.LoadRequest(mediaInfo);
        request.autoplay = true;
        request.currentTime = 0;
        return this.appSession.loadMedia(request, this.onMediaDiscovered, this.onMediaError);
      }
    };

    Excast.prototype.playMedia = function() {
      if (!this.mediaSession) {
        return false;
      }
      if (this.mediaSession.playerState === "PLAYING") {
        clearTimeout(this.timer);
        this.timer = null;
        this.mediaSession.pause(null, this.updateMediaDisplay, this.onError);
        return console.log('Play paused');
      } else {
        this.timer = setTimeout(this.updateProgress, 1000);
        this.mediaSession.play(null, this.updateMediaDisplay, this.onError);
        return console.log('Play started');
      }
    };

    Excast.prototype.seekMedia = function(percent) {
      var position, request;
      clearTimeout(this.timer);
      this.timer = null;
      position = percent * this.mediaSession.media.duration;
      console.log("Seeking to position " + position);
      request = new chrome.cast.media.SeekRequest();
      request.currentTime = position;
      return this.mediaSession.seek(request, this.updateMediaDisplay, this.onError);
    };

    Excast.prototype.stopMedia = function() {
      if (!this.mediaSession) {
        console.log("No media session to stop");
        return false;
      }
      $("#control-nav").hide();
      clearTimeout(this.timer);
      return this.mediaSession.stop(null, this.updateMediaDisplay, this.onError);
    };

    Excast.prototype.initializeCastApi = function() {
      var apiConfig, sessionRequest;
      sessionRequest = new chrome.cast.SessionRequest("E4815CDE");
      apiConfig = new chrome.cast.ApiConfig(sessionRequest, this.sessionListener, this.receiverListener);
      return chrome.cast.initialize(apiConfig, this.onInitSuccess, this.onError);
    };

    Excast.prototype.onMediaDiscovered = function(session) {
      console.log("onMediaDiscovered:", session);
      if (session && session.media) {
        this.mediaSession = session;
        session.addUpdateListener(this.updateMediaDisplay);
        return this.updateMediaDisplay();
      }
    };

    Excast.prototype.updateMediaDisplay = function() {
      if (this.mediaSession) {
        this.currentTime = this.mediaSession.currentTime;
        console.log('Overrode @currentTime with @mediaSession.currentTime of ', this.mediaSession.currentTime);
        $('#control-nav').show();
        $('.current-media').html(this.mediaSession.media.customData.title);
        $('.thumbnail').attr('src', this.mediaSession.media.customData.thumbnail);
        this.updateProgressBar();
        return this.updateControls();
      }
    };

    Excast.prototype.updateProgressBar = function() {
      var percent, progressWidth;
      if (this.mediaSession) {
        progressWidth = $(".progress").width();
        percent = this.currentTime / this.mediaSession.media.duration;
        $("#progress").width(progressWidth * percent);
        return $(".currentTime").html(this.formatTime(this.currentTime) + "/" + this.formatTime(this.mediaSession.media.duration));
      }
    };

    Excast.prototype.formatTime = function(duration) {
      var hours, minutes, seconds;
      duration = Math.floor(duration);
      hours = Math.floor(duration / 3600);
      minutes = Math.floor((duration - (hours * 3600)) / 60);
      seconds = duration % 60;
      if (hours < 1) {
        hours = "00";
      }
      if (minutes < 1) {
        minutes = "00";
      }
      if (seconds < 1) {
        seconds = "00";
      }
      return hours + ":" + minutes + ":" + seconds;
    };

    Excast.prototype.updateProgress = function() {
      this.currentTime++;
      console.log("updateProgress: ", this.currentTime);
      this.updateProgressBar();
      return this.timer = setTimeout(this.updateProgress, 1000);
    };

    Excast.prototype.updateControls = function() {
      console.log("Player State: ", this.mediaSession.playerState);
      if (this.mediaSession.playerState === "BUFFERING") {
        return $('.progress').addClass('active').addClass('progress-striped');
      } else {
        $('.progress').removeClass('active').removeClass('progress-striped');
        if (this.mediaSession.playerState === "PLAYING") {
          this.stop.removeClass('disabled');
          this.play.removeClass('disabled');
          this.play.removeClass('glyphicon-play').addClass('glyphicon-pause');
          if (!this.timer) {
            return this.timer = setTimeout(this.updateProgress, 1000);
          }
        } else if (this.mediaSession.playerState === "PAUSED") {
          this.stop.removeClass('disabled');
          this.play.removeClass('disabled');
          return this.play.removeClass('glyphicon-pause').addClass('glyphicon-play');
        } else {
          this.play.addClass('disabled');
          return this.stop.addClass('disabled');
        }
      }
    };

    Excast.prototype.onInitSuccess = function() {
      console.log('init success');
      this.init = true;
      return this.bindControls();
    };

    Excast.prototype.onError = function(e) {
      return console.log('Error: ', e);
    };

    Excast.prototype.sessionListener = function(e) {
      console.log("Received Session: ", e);
      this.appSession = e;
      if (e.media.length > 0) {
        this.onMediaDiscovered(e.media[0]);
      }
      this.appSession.addMediaListener(this.onMediaDiscovered);
      return this.appSession.addUpdateListener(this.sessionUpdateListener);
    };

    Excast.prototype.sessionUpdateListener = function(alive) {
      console.log((alive != null ? alive : {
        'Session Updated: ': 'Session Removed: '
      }) + this.appSession.sessionId);
      if (!isAlive) {
        this.appSession = null;
        return this.mediaSession = null;
      }
    };

    Excast.prototype.receiverListener = function(e) {
      if (e === 'available') {
        return console.log("receiver found");
      } else {
        return console.log(e);
      }
    };

    Excast.prototype.loadApp = function(cb) {
      if (!this.appSession && this.init) {
        return chrome.cast.requestSession(this.onRequestSessionSuccess.bind(this, cb), this.onRequestSessionError);
      }
    };

    Excast.prototype.onRequestSessionSuccess = function(cb, session) {
      this.appSession = session;
      return cb();
    };

    Excast.prototype.onRequestSessionError = function(e) {
      return console.log("Launch error: ", e);
    };

    return Excast;

  })();

  define(new Excast());

}).call(this);

/*
//@ sourceMappingURL=excast.map
*/
